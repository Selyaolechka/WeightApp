// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WeightApp.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Goals.
    /// </summary>
    public static partial class GoalsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            public static object GetGoal(this IGoals operations, int goalId)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).GetGoalAsync(goalId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGoalAsync(this IGoals operations, int goalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGoalWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            public static object CompleteGoal(this IGoals operations, int goalId)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).CompleteGoalAsync(goalId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CompleteGoalAsync(this IGoals operations, int goalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompleteGoalWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            public static object DeleteGoal(this IGoals operations, int goalId)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).DeleteGoalAsync(goalId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGoalAsync(this IGoals operations, int goalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGoalWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GoalModel> GetGoals(this IGoals operations)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).GetGoalsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GoalModel>> GetGoalsAsync(this IGoals operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGoalsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object SetNewGoal(this IGoals operations, SetNewGoalRequest request)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).SetNewGoalAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetNewGoalAsync(this IGoals operations, SetNewGoalRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetNewGoalWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetProgress(this IGoals operations)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).GetProgressAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProgressAsync(this IGoals operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProgressWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object TrackProgress(this IGoals operations, TrackProgressRequest request)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).TrackProgressAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TrackProgressAsync(this IGoals operations, TrackProgressRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrackProgressWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='progressId'>
            /// </param>
            public static object RemoveProgress(this IGoals operations, int progressId)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).RemoveProgressAsync(progressId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='progressId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveProgressAsync(this IGoals operations, int progressId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveProgressWithHttpMessagesAsync(progressId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            public static object GetMealsForGoal(this IGoals operations, int goalId)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).GetMealsForGoalAsync(goalId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMealsForGoalAsync(this IGoals operations, int goalId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMealsForGoalWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='date'>
            /// </param>
            public static object GetMealsForDate(this IGoals operations, DateTime? date = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((IGoals)s).GetMealsForDateAsync(date), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='date'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMealsForDateAsync(this IGoals operations, DateTime? date = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMealsForDateWithHttpMessagesAsync(date, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object AddMeal(this IGoals operations, AddMealRequest request)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).AddMealAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddMealAsync(this IGoals operations, AddMealRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddMealWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mealInstanceId'>
            /// </param>
            public static object RemoveMeal(this IGoals operations, int mealInstanceId)
            {
                return Task.Factory.StartNew(s => ((IGoals)s).RemoveMealAsync(mealInstanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mealInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveMealAsync(this IGoals operations, int mealInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveMealWithHttpMessagesAsync(mealInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
